"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _slicedToArray2 = require("babel-runtime/helpers/slicedToArray");

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _child_process = require("child_process");

var _ramda = require("ramda");

var R = _interopRequireWildcard(_ramda);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var collapseOptions = R.reduce(R.merge, {});
var partitionArgs = R.partition(R.is(Object));

exports.default = function (cmd) {
	for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		rest[_key - 1] = arguments[_key];
	}

	return new Promise(function (done) {
		var _partitionArgs = partitionArgs(rest),
		    _partitionArgs2 = (0, _slicedToArray3.default)(_partitionArgs, 2),
		    options = _partitionArgs2[0],
		    args = _partitionArgs2[1];

		var child = (0, _child_process.spawn)(cmd, args, collapseOptions(options));

		child.stdout.pipe(process.stdout);
		child.stderr.pipe(process.stderr);

		child.on("close", done);
	});
};