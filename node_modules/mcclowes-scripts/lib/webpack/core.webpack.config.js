"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.packageJSON = exports.addPlugin = exports.addLoader = undefined;

var _ramda = require("ramda");

var R = _interopRequireWildcard(_ramda);

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _webpack = require("webpack");

var _webpack2 = _interopRequireDefault(_webpack);

var _htmlWebpackPlugin = require("html-webpack-plugin");

var _htmlWebpackPlugin2 = _interopRequireDefault(_htmlWebpackPlugin);

var _webpackManifestPlugin = require("webpack-manifest-plugin");

var _webpackManifestPlugin2 = _interopRequireDefault(_webpackManifestPlugin);

var _simpleProgressWebpackPlugin = require("simple-progress-webpack-plugin");

var _simpleProgressWebpackPlugin2 = _interopRequireDefault(_simpleProgressWebpackPlugin);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// Make sure any symlinks in the project folder are resolved:
// https://github.com/facebook/create-react-app/issues/637
var appDirectory = _fs2.default.realpathSync(process.cwd());
var resolveApp = function resolveApp(relativePath) {
	return _path2.default.resolve(appDirectory, relativePath);
};

var addLoader = exports.addLoader = function addLoader(loader) {
	return R.over(R.lensPath(["module", "rules"]), R.append(loader));
};

var addPlugin = exports.addPlugin = function addPlugin(plugin) {
	return R.over(R.lensProp("plugins"), R.append(plugin));
};

var packageJSON = exports.packageJSON = require(resolveApp("package.json"));

exports.default = {
	entry: {
		app: "./src/index.js",
		vendor: Object.keys(packageJSON.dependencies) || []
	},

	output: {
		filename: "static/js/[name].[chunkhash].bundle.js",
		path: resolveApp("build/"),
		publicPath: "/"
	},

	resolve: {
		modules: ["node_modules", resolveApp("node_modules"), resolveApp(".")]
	},

	module: {
		rules: [{
			test: /\.js$/,
			loader: "shebang-loader"
		}, {
			test: /\.js$/,
			enforce: "pre",
			include: resolveApp("src"),
			use: [{
				loader: require.resolve("eslint-loader"),
				options: {
					extends: [require.resolve("eslint-config-mcclowes")]
				}
			}]
		}, {
			test: /\.js$/,
			exclude: /node_modules/,
			use: {
				loader: require.resolve("babel-loader"),
				options: {
					presets: ["mcclowes"],
					forceEnv: "production"
				}
			}
		}, {
			test: /\.js$/,
			include: /node_modules/,
			use: {
				loader: require.resolve("thread-loader")
			}
		}, {
			test: /\.css$/,
			use: ["style-loader", "css-loader"]
		}, {
			test: /\.(jpg|jpeg|gif|png|ico)$/,
			exclude: /node_modules/,
			loader: "file-loader",
			options: {
				name: "[path][name].[ext]?[hash]"
			}
		}, {
			test: /\.svg$/,
			exclude: /node_modules/,
			loader: "svg-inline-loader"
		}, {
			test: /\.(graphql|gql)$/,
			exclude: /node_modules/,
			loader: require.resolve("graphql-tag/loader")
		}, {
			test: /\.md$/,
			use: [{
				loader: require.resolve("html-loader")
			}, {
				loader: require.resolve("markdown-loader")
			}]
		}]
	},

	plugins: [
	// Generates an `index.html` file with the <script> injected.
	new _htmlWebpackPlugin2.default({
		inject: true,
		filename: "index.html",
		title: packageJSON.name,
		template: resolveApp("public/index.html"),
		hash: true,
		minify: {
			//removeComments: true,
			//collapseWhitespace: true,
			//removeRedundantAttributes: true,
			//useShortDoctype: true,
			//removeEmptyAttributes: true,
			//removeStyleLinkTypeAttributes: true,
			//keepClosingSlash: true,
			//minifyJS: true,
			//minifyCSS: true,
			//minifyURLs: true,
		}
	}), new _webpackManifestPlugin2.default({
		fileName: "asset-manifest.json"
	}), new _webpack2.default.ProvidePlugin({
		R: "ramda",
		React: "react",
		plog: "codogo-plog",
		Consts: resolveApp("src/consts")
	}), new _webpack2.default.IgnorePlugin(/^\.\/locale$/, /moment$/), new _simpleProgressWebpackPlugin2.default({ format: "compact" })]
};