"use strict";

var _slicedToArray2 = require("babel-runtime/helpers/slicedToArray");

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _build = require("./build");

var _build2 = _interopRequireDefault(_build);

var _format = require("./format");

var _format2 = _interopRequireDefault(_format);

var _pack = require("./pack");

var _pack2 = _interopRequireDefault(_pack);

var _start = require("./start");

var _start2 = _interopRequireDefault(_start);

var _watch = require("./watch");

var _watch2 = _interopRequireDefault(_watch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _process$argv = (0, _slicedToArray3.default)(process.argv, 4),
    _ = _process$argv[0],
    __ = _process$argv[1],
    cmd = _process$argv[2],
    subcmd = _process$argv[3];

var printCmds = function printCmds() {
	return console.error("\nvalid commands are:\n\n$ build \n\tbuilds everything from src -> lib\n\n$ format [add]\n\tformats everything in the src dir\n\t[add] adds all files to git\n\n$ pack\n\tbuilds everything in src using webpack\n\n$ start\n\tbuilds everything from src -> lib, watches for changes, serves on a local server\n\n$ watch \n\tbuilds everything from src -> lib, watches for changes\n");
};

if (!cmd) {
	printCmds();
} else {
	var noop = function noop() {
		console.log(cmd + " is an invalid command");
		printCmds();
	};

	(({
		build: _build2.default,
		format: _format2.default,
		pack: _pack2.default,
		start: _start2.default,
		watch: _watch2.default
	})[cmd] || noop)({ cmd: cmd, subcmd: subcmd });
}