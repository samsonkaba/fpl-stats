process.env.NODE_ENV = process.env.NODE_ENV || "development";

const webpack = require('webpack');

const paths = require('./paths');

const baseConfig = require("./webpack.config.dev.base.js");

baseConfig.resolve.modules = [
	"node_modules",
	paths.appNodeModules,
	paths.appPath,
];

//add our eslint config
baseConfig.module.rules[0].use[0].options.baseConfig.extends = [require.resolve('eslint-config-codogo')];

//use our babel preset
baseConfig.module.rules[1].oneOf[1].options.presets = [require.resolve('babel-preset-codogo')];
baseConfig.module.rules[1].oneOf[1].exclude=/node_modules/;

//fuck css
baseConfig.module.rules[1].oneOf.splice(2,1);

//gql
baseConfig.module.rules[1].oneOf[2].exclude.push(/\.(graphql|gql)$/);
baseConfig.module.rules[1].oneOf[2].exclude.push(/\.md$/);

baseConfig.module.rules[1].oneOf.push({
	test: /\.(graphql|gql)$/,
	loader: "graphql-tag/loader",
});

baseConfig.module.rules[1].oneOf.push({
	test: /\.md$/,
	use: [
		{
			loader: "html-loader"
		},
		{
			loader: "markdown-loader",
		}
	]
});

baseConfig.plugins.push(
	new webpack.ProvidePlugin({
		R: "ramda",
		React: "react",
		plog: "codogo-plog",
		Consts: paths.consts,
	})
);

module.exports = baseConfig;
