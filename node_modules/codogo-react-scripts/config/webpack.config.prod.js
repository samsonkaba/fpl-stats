process.env.NODE_ENV = process.env.NODE_ENV || "development";

const webpack = require('webpack');
const BundleAnalyzerPlugin = require("webpack-bundle-analyzer").BundleAnalyzerPlugin;
const path = require('path');

const paths = require('./paths');

const baseConfig = require("./webpack.config.prod.base.js");

const onlyIfModuleUsed = (vendor) => (module) =>{
	try{
		require.resolve(module);
		console.log("[" + vendor + "]: " + module );
		return true;
	}
	catch(e){
		console.log("[" + vendor + "]: " + module + " not used");
		return false;
	}
};

const removeUndefined = (x) => {
	const y = JSON.parse(JSON.stringify(x));
	return y;
}

const undefinedIfEmpty = (vendor, a) => {
	const x = a.filter(onlyIfModuleUsed(vendor));
	console.log('');
	return x.length ? x : undefined
};

const vendorModules = undefinedIfEmpty(
	"vendor",
	[
		"auth0-js",
		"auth0-lock",
		"immutable",
		"polished",
		"ramda",
		"styled-components",
	]
);

const codogoModules = undefinedIfEmpty(
	"codogo", 
	[
		"codogo-react-widgets",
	]
);

const reactAndApolloModules = undefinedIfEmpty(
	"reactAndApollo",
	[
		"apollo-client",
		"react",
		"react-apollo",
		"react-dom",
	]
);

const probablyConstantModules = undefinedIfEmpty(
	"constant",
	[
		"jwt-decode",
		"moment",
		"autobind-decorator",
		"whatwg-fetch",
	]
);

baseConfig.resolve.modules = [
	"node_modules",
	paths.appNodeModules,
	paths.appPath,
];

baseConfig.	resolveLoader = {
	modules: [
		paths.ownNodeModules,
		paths.appNodeModules,
	],
};

//add our eslint config
baseConfig.module.rules[0].use[0].options.baseConfig.extends = [require.resolve('eslint-config-codogo')];

//use our babel preset
baseConfig.module.rules[1].oneOf[1].options.presets = [require.resolve('babel-preset-codogo')];
baseConfig.module.rules[1].oneOf[1].exclude=/node_modules/;

//fuck css
baseConfig.module.rules[1].oneOf.splice(2,1);

//gql
baseConfig.module.rules[1].oneOf[2].exclude.push(/\.(graphql|gql)$/);
baseConfig.module.rules[1].oneOf[2].exclude.push(/\.md$/);

baseConfig.module.rules[1].oneOf.push({
	test: /\.(graphql|gql)$/,
	loader: "graphql-tag/loader",
});

baseConfig.module.rules[1].oneOf.push({
	test: /\.md$/,
	use: [
		{
			loader: "html-loader"
		},
		{
			loader: "markdown-loader",
		}
	]
});

baseConfig.plugins.push(
	new webpack.ProvidePlugin({
		R: "ramda",
		React: "react",
		plog: "codogo-plog",
		Consts: paths.consts,
	})
);

baseConfig.plugins.push(
	new BundleAnalyzerPlugin({
		analyzerMode: "static",
		openAnalyzer: false,
	})
);

module.exports = baseConfig;
