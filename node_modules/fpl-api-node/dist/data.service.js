"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = require("axios");
const NodeCache = require("node-cache");
const errors_enum_1 = require("./errors.enum");
/**
 * Hooks into available fpl endpoints.
 * The Available end-points are:
 * https://fantasy.premierleague.com/drf/bootstrap-static
 * https://fantasy.premierleague.com/drf/entry/${id}
 * https://fantasy.premierleague.com/drf/entry/${id}/history
 * https://fantasy.premierleague.com/drf/entry/${id}/event/{$event}/picks
 * https://fantasy.premierleague.com/drf/entry/${id}/transfers
 * https://fantasy.premierleague.com/drf/teams
 * https://fantasy.premierleague.com/drf/elements
 * https://fantasy.premierleague.com/drf/events
 * https://fantasy.premierleague.com/drf/game-settings
 * https://fantasy.premierleague.com/drf/event/${event}/live
 * https://fantasy.premierleague.com/drf/leagues-classic-standings/${id}
 */
// set axios defaults
axios_1.default.defaults.baseURL = 'https://fantasy.premierleague.com/drf';
// standard cache timeout (30 mins)
const stdCacheTTL = 1800;
// reference to cache object
exports.cache = new NodeCache();
function findEntryRoot(entryId) {
    return fetch(`/entry/${entryId}/history`);
}
exports.findEntryRoot = findEntryRoot;
function findEntryEventPicksRoot(entryId, eventNumber) {
    return fetchEvent(`/entry/${entryId}/event/${eventNumber}/picks`, eventNumber);
}
exports.findEntryEventPicksRoot = findEntryEventPicksRoot;
function findEntryTransfers(entryId) {
    return fetch(`/entry/${entryId}/transfers`);
}
exports.findEntryTransfers = findEntryTransfers;
function findLiveEvent(eventNumber) {
    return fetchEvent(`/event/${eventNumber}/live`, eventNumber);
}
exports.findLiveEvent = findLiveEvent;
function findLeagueRoot(leagueId, pageNumber = 1) {
    return fetch(`/leagues-classic-standings/${leagueId}?page=${pageNumber}`, false, {
        params: {
            'ls-page': pageNumber,
        },
    });
}
exports.findLeagueRoot = findLeagueRoot;
function getBootstrapData() {
    return fetch('/bootstrap-static');
}
exports.getBootstrapData = getBootstrapData;
/**
 * Fetch event related request (if event has passed we can cache it forever)
 * @param path
 * @param eventNumber
 */
function fetchEvent(path, eventNumber) {
    return new Promise((resolve, reject) => {
        const cacheValue = exports.cache.get(path);
        if (cacheValue) {
            resolve(cacheValue);
        }
        else {
            return getBootstrapData().then((data) => {
                const currentEvent = data['current-event'];
                resolve(fetch(path, eventNumber < currentEvent));
            });
        }
    });
}
/**
 * Fetch generic request
 * @param path
 * @param ttl
 */
function fetch(path, cacheForever = false, config = {}) {
    return new Promise((resolve, reject) => {
        const cacheValue = exports.cache.get(path);
        if (cacheValue) {
            resolve(cacheValue);
        }
        else {
            axios_1.default.get(path, config).then((response) => {
                const data = response.data;
                if (Object.keys(data).length > 0 && data.constructor === Object) {
                    exports.cache.set(path, data, cacheForever ? 0 : stdCacheTTL);
                    resolve(data);
                }
                else {
                    if (data.includes('The game is being updated')) {
                        reject(errors_enum_1.Errors.GAME_UPDATING);
                    }
                    else {
                        reject(errors_enum_1.Errors.NOT_FOUND);
                    }
                }
            }).catch(() => {
                reject(errors_enum_1.Errors.NO_RESPONSE);
            });
        }
    });
}
exports.fetch = fetch;
