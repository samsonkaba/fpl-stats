"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const dataService = require("./data-service");
function findEntry(entryId) {
    return __awaiter(this, void 0, void 0, function* () {
        const data = yield dataService.findEntryRoot(entryId);
        return data.entry;
    });
}
exports.findEntry = findEntry;
function findEntryEvents(entryId) {
    return __awaiter(this, void 0, void 0, function* () {
        const data = yield dataService.findEntryRoot(entryId);
        return data.history;
    });
}
exports.findEntryEvents = findEntryEvents;
function findEntryChips(entryId) {
    return __awaiter(this, void 0, void 0, function* () {
        const data = yield dataService.findEntryRoot(entryId);
        return data.chips;
    });
}
exports.findEntryChips = findEntryChips;
function findEntryEvent(entryId, eventNumber) {
    return __awaiter(this, void 0, void 0, function* () {
        const data = yield dataService.findEntryEventPicksRoot(entryId, eventNumber);
        return data.entry_history;
    });
}
exports.findEntryEvent = findEntryEvent;
function findEntryPicksByEvent(entryId, event) {
    return __awaiter(this, void 0, void 0, function* () {
        const data = yield dataService.findEntryEventPicksRoot(entryId, event);
        return data.picks;
    });
}
exports.findEntryPicksByEvent = findEntryPicksByEvent;
function findEntryTransferHistory(entryId) {
    return __awaiter(this, void 0, void 0, function* () {
        const data = yield dataService.findEntryTransfers(entryId);
        return data.history;
    });
}
exports.findEntryTransferHistory = findEntryTransferHistory;
function findElementsByEvent(event) {
    return __awaiter(this, void 0, void 0, function* () {
        const data = yield dataService.findLiveEvent(event);
        return data.elements;
    });
}
exports.findElementsByEvent = findElementsByEvent;
function findLeague(leagueId) {
    return __awaiter(this, void 0, void 0, function* () {
        const data = yield dataService.findLeagueRoot(leagueId);
        return data.league;
    });
}
exports.findLeague = findLeague;
function findLeagueStandings(leagueId, pageNumber = 1) {
    return __awaiter(this, void 0, void 0, function* () {
        const data = yield dataService.findLeagueRoot(leagueId, pageNumber);
        return data.standings;
    });
}
exports.findLeagueStandings = findLeagueStandings;
function getElements() {
    return __awaiter(this, void 0, void 0, function* () {
        const data = yield dataService.getBootstrapData();
        return data.elements;
    });
}
exports.getElements = getElements;
function getElementTypes() {
    return __awaiter(this, void 0, void 0, function* () {
        const data = yield dataService.getBootstrapData();
        return data.element_types;
    });
}
exports.getElementTypes = getElementTypes;
function getEvents() {
    return __awaiter(this, void 0, void 0, function* () {
        const data = yield dataService.getBootstrapData();
        return data.events;
    });
}
exports.getEvents = getEvents;
function getTeams() {
    return __awaiter(this, void 0, void 0, function* () {
        const data = yield dataService.getBootstrapData();
        return data.teams;
    });
}
exports.getTeams = getTeams;
function getTotalNumberOfEntries() {
    return __awaiter(this, void 0, void 0, function* () {
        const data = yield dataService.getBootstrapData();
        return data['total-players'];
    });
}
exports.getTotalNumberOfEntries = getTotalNumberOfEntries;
function getCurrentEventNumber() {
    return __awaiter(this, void 0, void 0, function* () {
        const data = yield dataService.getBootstrapData();
        return data['current-event'];
    });
}
exports.getCurrentEventNumber = getCurrentEventNumber;
