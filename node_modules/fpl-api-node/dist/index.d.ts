import { EntryPick, EntryPickStats, EntryStats } from './interfaces.custom';
import { Element, ElementType, Entry, EntryChip, EntryEvent, EntryTransferHistory, Event, EventElements, League, LeagueStandings, Pick, Team } from './interfaces.fpl';
/**
 * Returns entry summary / details.
 * @param entryId The id of entry
 */
export declare function findEntry(entryId: number): Promise<Entry>;
/**
 * Returns a collection of completed or ongoing events
 * @param entryId The id of entry
 */
export declare function findEntryEvents(entryId: number): Promise<EntryEvent[]>;
/**
 * Returns chip details of a specified entry
 * @param entryId The id of entry
 * @param eventNumber The event number
 */
export declare function findEntryChips(entryId: number): Promise<EntryChip[]>;
/**
 * Returns a details of a specified event
 * @param entryId The id of entry
 * @param eventNumber The event number
 */
export declare function findEntryEvent(entryId: number, eventNumber: number): Promise<EntryEvent>;
/**
 * Returns a collection of picks for a specified event
 * @param entryId The id of entry
 * @param event The event number
 */
export declare function findEntryPicks(entryId: number): Promise<EntryPick[]>;
/**
 * Returns some general stats
 * @param entryId
 */
export declare function findEntryStats(entryId: number): Promise<EntryStats>;
/**
 * Returns a collection of picks for a specified event
 * @param entryId The id of entry
 * @param event The event number
 */
export declare function findEntryPicksByEvent(entryId: number, event: number): Promise<Pick[]>;
/**
 * Returns transfer history of an entry
 * @param entryId The id of entry
 */
export declare function findEntryTransferHistory(entryId: number): Promise<EntryTransferHistory[]>;
/**
 * Returns all element data for a specified event
 * @param event The event number
 */
export declare function findElementsByEvent(event: number): Promise<EventElements>;
/**
 * Returns specified details of a classic league
 * @param leagueId The id of the league
 */
export declare function findLeague(leagueId: number): Promise<League>;
/**
 * Returns specified standings of a classic league
 * @param leagueId The id of the league
 * @param pageNumber The page number of the standings (50 results per page)
 */
export declare function findLeagueStandings(leagueId: number, pageNumber?: number): Promise<LeagueStandings>;
/**
 * Returns a collection of all elements.
 */
export declare function getElements(): Promise<Element[]>;
/**
 * Returns a collection of all element types in the game
 */
export declare function getElementTypes(): Promise<ElementType[]>;
/**
 * Returns a collection of all events
 */
export declare function getEvents(): Promise<Event[]>;
/**
 * Returns a collection of all teams
 */
export declare function getTeams(): Promise<Team[]>;
/**
 * Returns the total number of entries
 */
export declare function getTotalNumberOfEntries(): Promise<number>;
/**
 * Returns the current event number
 */
export declare function getCurrentEventNumber(): Promise<number>;
export { ElementType, Entry, EntryChip, EntryEvent, Pick, EntryTransferHistory, EventElements, EntryPickStats, League, LeagueStandings, Team };
